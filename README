  structure du projet

  /gestion_immo/
  â”‚
  â”œâ”€â”€ manage.py
  â”œâ”€â”€ requirements.txt
  â”œâ”€â”€ /gestion_immo/
  â”‚   â”œâ”€â”€ settings.py
  â”‚   â”œâ”€â”€ urls.py
  â”‚
  â”œâ”€â”€ /users/           app pour gÃ©rer l'authentification
  â”‚   â”œâ”€â”€ models.py
  â”‚   â”œâ”€â”€ serializers.py
  â”‚   â”œâ”€â”€ views.py
  â”‚   â”œâ”€â”€ urls.py
  â”‚
  â”œâ”€â”€ /properties/      app pour gÃ©rer les biens immobiliers
  â”‚   â”œâ”€â”€ models.py
  â”‚   â”œâ”€â”€ serializers.py
  â”‚   â”œâ”€â”€ views.py
  â”‚   â”œâ”€â”€ urls.py
  â”‚
  â””â”€â”€ /rentals/         app pour gÃ©rer la location
      â”œâ”€â”€ models.py
      â”œâ”€â”€ serializers.py
      â”œâ”€â”€ views.py
      â”œâ”€â”€ urls.py

  ğŸ”·ğŸ”·ğŸ”¸ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”·ğŸ”·ğŸ”·ğŸ”·ğŸ”¸ğŸ”¹ğŸ”·ğŸ”·ğŸ”·ğŸ”¹ğŸ”¹ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
  STEP 1 : Installer Django et crÃ©er la structure du projet
  ğŸ”·ğŸ”·ğŸ”¸ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”·ğŸ”·ğŸ”·ğŸ”·ğŸ”¸ğŸ”¹ğŸ”·ğŸ”·ğŸ”·ğŸ”¹ğŸ”¹ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸

  1.1 â€” Installer Django et Django REST Framework
  Dans ton terminal :

    1. CrÃ©er un environnement virtuel (super important pour isoler ton projet)
  python -m venv env

    2. Activer ton environnement virtuel
    Sur Windows :
  env\Scripts\activate

    3. Installer Django et Django REST Framework
  pip install django djangorestframework

    4. Installer la bibliothÃ¨que pour authentification plus propre (JWT)
  pip install djangorestframework-simplejwt

  Pourquoi on fait Ã§a ?

  Le venv (venv/) te protÃ¨ge : ton projet utilise ses propres versions des librairies, sans toucher au reste de ton PC.
  Django = framework principal.
  Django REST Framework = module pour transformer Django en API rapide.
  SimpleJWT = gÃ©rer lâ€™authentification avec des jetons sÃ©curisÃ©s.

  ğŸ”·ğŸ”·ğŸ”¸ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”·ğŸ”·ğŸ”·ğŸ”·ğŸ”¸ğŸ”¹ğŸ”·ğŸ”·ğŸ”·ğŸ”¹ğŸ”¹ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
    CrÃ©er le projet principal
  django-admin startproject gestion_immo .
  Attention au . Ã  la fin : Ã§a crÃ©e le projet dans le dossier oÃ¹ tu es actuellement, sans crÃ©er un sous-dossier en trop.

  RÃ©sultat :
  Un dossier /gestion_immo/ contenant :
  settings.py : config du projet
  urls.py : les routes principales
  etc.
  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
    1. Application pour gÃ©rer les utilisateurs
  python manage.py startapp users

    2. Application pour gÃ©rer les biens immobiliers
  python manage.py startapp properties

    3. Application pour gÃ©rer les locations
  python manage.py startapp rentals

  Pourquoi sÃ©parer ?

  users/ â†’ gÃ¨re l'inscription / connexion
  properties/ â†’ gÃ¨re les maisons, appartements Ã  louer
  rentals/ â†’ gÃ¨re les rÃ©servations de biens par des client

  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸

  1.4 â€” Installer tes apps dans settings.py
  Ouvre le fichier gestion_immo/settings.py, trouve la liste INSTALLED_APPS et ajoute :

  INSTALLED_APPS = [
      ...
      'rest_framework',
      'rest_framework_simplejwt',
      'users',
      'properties',
      'rentals',
  ]
  Pourquoi ?
  Django doit savoir que tes nouvelles apps existent pour pouvoir les utiliser !

  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
      1.5 â€” Config de base pour Django REST
      Toujours dans settings.py, tout en bas, ajoute cette config pour REST Framework :

      REST_FRAMEWORK = {
          'DEFAULT_AUTHENTICATION_CLASSES': (
              'rest_framework_simplejwt.authentication.JWTAuthentication',
          )
      }
      Pourquoi ?
      Ã‡a dit Ã  Django : "Hey, pour sÃ©curiser mon API, utilise les tokens JWT !"

  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸

      1.6 â€” PrÃ©parer les routes principales
      Dans gestion_immo/urls.py, Ã©cris :

      from django.contrib import admin
      from django.urls import path, include

      urlpatterns = [
          path('admin/', admin.site.urls),
          path('api/', include('users.urls')),
          path('api/', include('properties.urls')),
          path('api/', include('rentals.urls')),
      ]
      Pourquoi ?
      On dit Ã  Django : "Quand une URL commence par /api/, regarde dans les apps pour savoir quoi faire."

  ğŸ”·ğŸ”·ğŸ”¸ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”·ğŸ”·ğŸ”·ğŸ”·ğŸ”¸ğŸ”¹ğŸ”·ğŸ”·ğŸ”·ğŸ”¹ğŸ”¹ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
  STEP 2 : Authentification - Partie Users
  ğŸ”·ğŸ”·ğŸ”¸ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”·ğŸ”·ğŸ”·ğŸ”·ğŸ”¸ğŸ”¹ğŸ”·ğŸ”·ğŸ”·ğŸ”¹ğŸ”¹ğŸ”·ğŸ”·ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸

  2.1 CrÃ©er le modÃ¨le Utilisateur
  On veut que chaque utilisateur soit soit admin, soit client.

  Dans users/models.py, Ã©cris :

  from django.contrib.auth.models import AbstractUser
  from django.db import models

  class User(AbstractUser):
      is_client = models.BooleanField(default=True)    Par dÃ©faut c'est un client
      is_admin = models.BooleanField(default=False)    L'admin sera dÃ©fini manuellement
  Explication :

  On hÃ©rite de AbstractUser â†’ Django sait dÃ©jÃ  gÃ©rer username, password, etc.
  On ajoute juste is_client et is_admin pour savoir qui est qui dans ton appli.

  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸


  2.2 Dire Ã  Django dâ€™utiliser ton User personnalisÃ©   
  Dans settings.py, ajoute cette ligne :   

  AUTH_USER_MODEL = 'users.User'
  Pourquoi ?
  Par dÃ©faut Django utilise son User standard. LÃ , on lui dit "utilise MON modÃ¨le Ã  moi".

  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
2.3 CrÃ©er le Serializer pour lâ€™inscription
    Dans users/serializers.py
    Explication :
    On dÃ©finit quels champs on expose Ã  lâ€™API
    create_user â†’ Ã§a chiffre le mot de passe automatiquement pour la sÃ©curitÃ©
    
  ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
  2.4 CrÃ©er les Views
    Dans users/views.py
    Explication :
    CreateAPIView = vue Django REST qui permet de faire des crÃ©ations (POST) trÃ¨s facilement.
 
   ğŸ”¸ğŸ”¸ğŸ”¶ğŸ”¶ğŸ”¶ğŸ”¸ğŸ”¸ğŸ”¸
   2.5 Configurer les URLs
    Dans users/urls.py
    Explication :
    /register/ â†’ pour inscrire un nouvel utilisateur
    /login/ â†’ pour se connecter et obtenir un Token JWT
    /token/refresh/ â†’ pour rafraÃ®chir ton token JWT quand il expire



# Initialiser le dÃ©pÃ´t
git init

# Ajouter tous les fichiers
git add .

# Commit avec message
git commit -m "Initial commit"

# Lier Ã  GitHub
git remote add origin https://github.com/Waribiz/gestion_immo.git

# Envoyer le code
git push -u origin main
